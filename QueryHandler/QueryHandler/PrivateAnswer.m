/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "PrivateAnswer.h"

@implementation PrivateAnswer

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAnalystId: (int64_t) analystId queryId: (int64_t) queryId privateAnswerBits: (NSData *) privateAnswerBits bitlen: (int32_t) bitlen joinId: (int64_t) joinId versionId: (int64_t) versionId
{
  self = [super init];
  __analystId = analystId;
  __analystId_isset = YES;
  __queryId = queryId;
  __queryId_isset = YES;
  __privateAnswerBits = [privateAnswerBits retain_stub];
  __privateAnswerBits_isset = YES;
  __bitlen = bitlen;
  __bitlen_isset = YES;
  __joinId = joinId;
  __joinId_isset = YES;
  __versionId = versionId;
  __versionId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"analystId"])
  {
    __analystId = [decoder decodeInt64ForKey: @"analystId"];
    __analystId_isset = YES;
  }
  if ([decoder containsValueForKey: @"queryId"])
  {
    __queryId = [decoder decodeInt64ForKey: @"queryId"];
    __queryId_isset = YES;
  }
  if ([decoder containsValueForKey: @"privateAnswerBits"])
  {
    __privateAnswerBits = [[decoder decodeObjectForKey: @"privateAnswerBits"] retain_stub];
    __privateAnswerBits_isset = YES;
  }
  if ([decoder containsValueForKey: @"bitlen"])
  {
    __bitlen = [decoder decodeInt32ForKey: @"bitlen"];
    __bitlen_isset = YES;
  }
  if ([decoder containsValueForKey: @"joinId"])
  {
    __joinId = [decoder decodeInt64ForKey: @"joinId"];
    __joinId_isset = YES;
  }
  if ([decoder containsValueForKey: @"versionId"])
  {
    __versionId = [decoder decodeInt64ForKey: @"versionId"];
    __versionId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__analystId_isset)
  {
    [encoder encodeInt64: __analystId forKey: @"analystId"];
  }
  if (__queryId_isset)
  {
    [encoder encodeInt64: __queryId forKey: @"queryId"];
  }
  if (__privateAnswerBits_isset)
  {
    [encoder encodeObject: __privateAnswerBits forKey: @"privateAnswerBits"];
  }
  if (__bitlen_isset)
  {
    [encoder encodeInt32: __bitlen forKey: @"bitlen"];
  }
  if (__joinId_isset)
  {
    [encoder encodeInt64: __joinId forKey: @"joinId"];
  }
  if (__versionId_isset)
  {
    [encoder encodeInt64: __versionId forKey: @"versionId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __analystId_isset ? 2654435761 : 0;
  if (__analystId_isset)
  {
    hash = (hash * 31) ^ [@(__analystId) hash];
  }
  hash = (hash * 31) ^ __queryId_isset ? 2654435761 : 0;
  if (__queryId_isset)
  {
    hash = (hash * 31) ^ [@(__queryId) hash];
  }
  hash = (hash * 31) ^ __privateAnswerBits_isset ? 2654435761 : 0;
  if (__privateAnswerBits_isset)
  {
    hash = (hash * 31) ^ [__privateAnswerBits hash];
  }
  hash = (hash * 31) ^ __bitlen_isset ? 2654435761 : 0;
  if (__bitlen_isset)
  {
    hash = (hash * 31) ^ [@(__bitlen) hash];
  }
  hash = (hash * 31) ^ __joinId_isset ? 2654435761 : 0;
  if (__joinId_isset)
  {
    hash = (hash * 31) ^ [@(__joinId) hash];
  }
  hash = (hash * 31) ^ __versionId_isset ? 2654435761 : 0;
  if (__versionId_isset)
  {
    hash = (hash * 31) ^ [@(__versionId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[PrivateAnswer class]]) {
    return NO;
  }
  PrivateAnswer *other = (PrivateAnswer *)anObject;
  if ((__analystId_isset != other->__analystId_isset) ||
      (__analystId_isset && (__analystId != other->__analystId))) {
    return NO;
  }
  if ((__queryId_isset != other->__queryId_isset) ||
      (__queryId_isset && (__queryId != other->__queryId))) {
    return NO;
  }
  if ((__privateAnswerBits_isset != other->__privateAnswerBits_isset) ||
      (__privateAnswerBits_isset && ((__privateAnswerBits || other->__privateAnswerBits) && ![__privateAnswerBits isEqual:other->__privateAnswerBits]))) {
    return NO;
  }
  if ((__bitlen_isset != other->__bitlen_isset) ||
      (__bitlen_isset && (__bitlen != other->__bitlen))) {
    return NO;
  }
  if ((__joinId_isset != other->__joinId_isset) ||
      (__joinId_isset && (__joinId != other->__joinId))) {
    return NO;
  }
  if ((__versionId_isset != other->__versionId_isset) ||
      (__versionId_isset && (__versionId != other->__versionId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__privateAnswerBits release_stub];
  [super dealloc_stub];
}

- (int64_t) analystId {
  return __analystId;
}

- (void) setAnalystId: (int64_t) analystId {
  __analystId = analystId;
  __analystId_isset = YES;
}

- (BOOL) analystIdIsSet {
  return __analystId_isset;
}

- (void) unsetAnalystId {
  __analystId_isset = NO;
}

- (int64_t) queryId {
  return __queryId;
}

- (void) setQueryId: (int64_t) queryId {
  __queryId = queryId;
  __queryId_isset = YES;
}

- (BOOL) queryIdIsSet {
  return __queryId_isset;
}

- (void) unsetQueryId {
  __queryId_isset = NO;
}

- (NSData *) privateAnswerBits {
  return [[__privateAnswerBits retain_stub] autorelease_stub];
}

- (void) setPrivateAnswerBits: (NSData *) privateAnswerBits {
  [privateAnswerBits retain_stub];
  [__privateAnswerBits release_stub];
  __privateAnswerBits = privateAnswerBits;
  __privateAnswerBits_isset = YES;
}

- (BOOL) privateAnswerBitsIsSet {
  return __privateAnswerBits_isset;
}

- (void) unsetPrivateAnswerBits {
  [__privateAnswerBits release_stub];
  __privateAnswerBits = nil;
  __privateAnswerBits_isset = NO;
}

- (int32_t) bitlen {
  return __bitlen;
}

- (void) setBitlen: (int32_t) bitlen {
  __bitlen = bitlen;
  __bitlen_isset = YES;
}

- (BOOL) bitlenIsSet {
  return __bitlen_isset;
}

- (void) unsetBitlen {
  __bitlen_isset = NO;
}

- (int64_t) joinId {
  return __joinId;
}

- (void) setJoinId: (int64_t) joinId {
  __joinId = joinId;
  __joinId_isset = YES;
}

- (BOOL) joinIdIsSet {
  return __joinId_isset;
}

- (void) unsetJoinId {
  __joinId_isset = NO;
}

- (int64_t) versionId {
  return __versionId;
}

- (void) setVersionId: (int64_t) versionId {
  __versionId = versionId;
  __versionId_isset = YES;
}

- (BOOL) versionIdIsSet {
  return __versionId_isset;
}

- (void) unsetVersionId {
  __versionId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAnalystId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setQueryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPrivateAnswerBits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBitlen: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setJoinId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setVersionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrivateAnswer"];
  if (__analystId_isset) {
    [outProtocol writeFieldBeginWithName: @"analystId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __analystId];
    [outProtocol writeFieldEnd];
  }
  if (__queryId_isset) {
    [outProtocol writeFieldBeginWithName: @"queryId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __queryId];
    [outProtocol writeFieldEnd];
  }
  if (__privateAnswerBits_isset) {
    if (__privateAnswerBits != nil) {
      [outProtocol writeFieldBeginWithName: @"privateAnswerBits" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __privateAnswerBits];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bitlen_isset) {
    [outProtocol writeFieldBeginWithName: @"bitlen" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __bitlen];
    [outProtocol writeFieldEnd];
  }
  if (__joinId_isset) {
    [outProtocol writeFieldBeginWithName: @"joinId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __joinId];
    [outProtocol writeFieldEnd];
  }
  if (__versionId_isset) {
    [outProtocol writeFieldBeginWithName: @"versionId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __versionId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PrivateAnswer("];
  [ms appendString: @"analystId:"];
  [ms appendFormat: @"%qi", __analystId];
  [ms appendString: @",queryId:"];
  [ms appendFormat: @"%qi", __queryId];
  [ms appendString: @",privateAnswerBits:"];
  [ms appendFormat: @"\"%@\"", __privateAnswerBits];
  [ms appendString: @",bitlen:"];
  [ms appendFormat: @"%i", __bitlen];
  [ms appendString: @",joinId:"];
  [ms appendFormat: @"%qi", __joinId];
  [ms appendString: @",versionId:"];
  [ms appendFormat: @"%qi", __versionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation PrivateAnswerConstants
+ (void) initialize {
}
@end

